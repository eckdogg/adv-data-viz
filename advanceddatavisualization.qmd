---
title: "Advanced Data Visualization"
author: Owen Eckweiler
date: 6/4/2025
editor: source
format: 
  html:
    toc: true # use this to display a table of contents
execute:
  message: false # use this to make sure messages don't show up
  warning: false # use this to make sure warnings don't show up
---

# Repository Link

<https://github.com/eckdogg/adv-data-viz>


# Set up

```{r}
library("tidyverse") # reading in packages
library("here")
library("gt")
library("janitor")
library("readxl")
library("ggplot2")
library("dplyr")
library("lubridate")
```


# Code for Graphs

```{r}
personaldata <- read_csv(here("data","personaldatajune3.csv")) # creating an object called "personaldata" from my csv
personaldata_clean <- personaldata |> clean_names() # cleaning up the variable names
```

## Box Plot

```{r}
ggplot(data = personaldata_clean, # start with the personaldata_clean data frame
       aes(x = school_day, # x-axis should be type of day
           y = floors_climbed, # y-axis should be number of floors climbed 
           color = school_day)) + # coloring by type of day
  geom_boxplot() + # first layer should be a boxplot
  geom_jitter(width = 0.2, # making the points jitter horizontally
              height = 0) + # making sure points don't jitter vertically
  labs(x = "School Day", # labelling the x-axis
       y = "Floors Climbed") + # labelling the y-axis
  theme(legend.position = "none") # removes the legend
```

## Ridgeline Chart

```{r}
library(ggridges) # reading in ggridges package

ggplot(personaldata_clean, aes(x = floors_climbed, y = school_day, fill = school_day)) + # choosing data frame and assigning axis values
  geom_density_ridges(scale = 1, alpha = 0.7) + # adding density ridges
  labs(x = "Floors Climbed", y = "School Day") + # adding axis labels
  theme_minimal() + # adding a minimalistic theme
  theme(legend.position = "none") # removing the legend
```


## Stacked Area Chart

```{r}
personaldatasummary <- personaldata_clean |> # choosing data frame and summarizing
  group_by(school_day, date) |> # grouping by select variables
  summarize(daily_floors = sum(floors_climbed, na.rm = TRUE), .groups = "drop") |> # summarizing daily floors climbed
  arrange(date) |> # arranging by date
  group_by(school_day) |> # grouping by school day
  mutate(cumulative_floors = cumsum(daily_floors)) # taking the cumulative sum of daily floors climbed

label_data <- personaldatasummary |> # labeling data
  group_by(school_day) |> # grouping by school day (yes or no)
  slice_max(order_by = date, n = 1) # selecting rows with the largest values of a variable

ggplot(personaldatasummary, aes(x = date, y = cumulative_floors, fill = school_day)) + # using ggplot and assigning values
  geom_area(alpha = 0.8) + # stacked area chart
  geom_text( # adding labels to plot
    data = label_data, # labeling data
    aes(x = date, y = cumulative_floors, label = school_day), # assigning values
    hjust = -0.1, # horizontal orientation
    vjust = 0.5, # vertical orientation
    size = 4, # choosing font size
    color = "black", # black labels
    inherit.aes = FALSE # overriding default aesthetics
  ) +
  labs( # labels
    title = "Cumulative Floors Climbed by School Day", # adding title
    x = "Date", # labeling x axis
    y = "Cumulative Floors" # labeling y axis
  ) +
  theme_minimal() + # adding a minimalist theme
  theme(legend.position = "none") + # removing legend
  expand_limits(x = max(personaldatasummary$date) + 5) # expand x axis to display chart labels
```
